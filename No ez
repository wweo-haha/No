--[[ 
SkidFling GUI Integrated Full Script (Edited)
- Uses your SkidFling function as-is (unchanged)
- GUI: draggable, persists on respawn (ResetOnSpawn = false)
- Dynamic player list, All / Single toggles
- Notifications top-right (red blink then fade) when players leave/join/selected-left
- Fixed: removed "Error Occurred Random enior"
- Toggle GUI works properly (open/close)
- Player selection toggle (click again to deselect)
]]

-- Services
local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")

-- === Original variables / helpers from your script ===
local Targets = {"All"} -- "All", "Target Name", "arian_was_here"
local AllBool = false

local GetPlayer = function(Name)
    Name = Name:lower()
    if Name == "all" or Name == "others" then
        AllBool = true
        return
    elseif Name == "random" then
        local GetPlayers = Players:GetPlayers()
        if table.find(GetPlayers,Player) then table.remove(GetPlayers,table.find(GetPlayers,Player)) end
        return GetPlayers[math.random(#GetPlayers)]
    elseif Name ~= "random" and Name ~= "all" and Name ~= "others" then
        for _,x in next, Players:GetPlayers() do
            if x ~= Player then
                if x.Name:lower():match("^"..Name) then
                    return x;
                elseif x.DisplayName:lower():match("^"..Name) then
                    return x;
                end
            end
        end
    else
        return
    end
end

local Message = function(_Title, _Text, Time)
    game:GetService("StarterGui"):SetCore("SendNotification", {Title = _Title, Text = _Text, Duration = Time})
end

-- === Your SkidFling function (kept exactly as you provided) ===
local SkidFling = function(TargetPlayer)
    local Character = Player.Character
    local Humanoid = Character and Character:FindFirstChildOfClass("Humanoid")
    local RootPart = Humanoid and Humanoid.RootPart

    local TCharacter = TargetPlayer.Character
    local THumanoid
    local TRootPart
    local THead
    local Accessory
    local Handle

    if TCharacter:FindFirstChildOfClass("Humanoid") then
        THumanoid = TCharacter:FindFirstChildOfClass("Humanoid")
    end
    if THumanoid and THumanoid.RootPart then
        TRootPart = THumanoid.RootPart
    end
    if TCharacter:FindFirstChild("Head") then
        THead = TCharacter.Head
    end
    if TCharacter:FindFirstChildOfClass("Accessory") then
        Accessory = TCharacter:FindFirstChildOfClass("Accessory")
    end
    if Accessory and Accessory:FindFirstChild("Handle") then
        Handle = Accessory.Handle
    end

    if Character and Humanoid and RootPart then
        if RootPart.Velocity.Magnitude < 50 then
            getgenv().OldPos = RootPart.CFrame
        end
        if THumanoid and THumanoid.Sit and not AllBool then
            return Message("Error Occurred", "Targeting is sitting", 5)
        end
        if THead then
            workspace.CurrentCamera.CameraSubject = THead
        elseif not THead and Handle then
            workspace.CurrentCamera.CameraSubject = Handle
        elseif THumanoid and TRootPart then
            workspace.CurrentCamera.CameraSubject = THumanoid
        end
        if not TCharacter:FindFirstChildWhichIsA("BasePart") then
            return
        end
        
        local FPos = function(BasePart, Pos, Ang)
            RootPart.CFrame = CFrame.new(BasePart.Position) * Pos * Ang
            Character:SetPrimaryPartCFrame(CFrame.new(BasePart.Position) * Pos * Ang)
            RootPart.Velocity = Vector3.new(9e7, 9e7 * 10, 9e7)
            RootPart.RotVelocity = Vector3.new(9e8, 9e8, 9e8)
        end
        
        local SFBasePart = function(BasePart)
            local TimeToWait = 2
            local Time = tick()
            local Angle = 0

            repeat
                if RootPart and THumanoid then
                    if BasePart.Velocity.Magnitude < 50 then
                        Angle = Angle + 100

                        FPos(BasePart, CFrame.new(0, 1.5, 0) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle),0 ,0))
                        task.wait()

                        FPos(BasePart, CFrame.new(0, -1.5, 0) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
                        task.wait()

                        FPos(BasePart, CFrame.new(2.25, 1.5, -2.25) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
                        task.wait()

                        FPos(BasePart, CFrame.new(-2.25, -1.5, 2.25) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
                        task.wait()

                        FPos(BasePart, CFrame.new(0, 1.5, 0) + THumanoid.MoveDirection,CFrame.Angles(math.rad(Angle), 0, 0))
                        task.wait()

                        FPos(BasePart, CFrame.new(0, -1.5, 0) + THumanoid.MoveDirection,CFrame.Angles(math.rad(Angle), 0, 0))
                        task.wait()
                    else
                        FPos(BasePart, CFrame.new(0, 1.5, THumanoid.WalkSpeed), CFrame.Angles(math.rad(90), 0, 0))
                        task.wait()

                        FPos(BasePart, CFrame.new(0, -1.5, -THumanoid.WalkSpeed), CFrame.Angles(0, 0, 0))
                        task.wait()
                    end
                else
                    break
                end
            until BasePart.Velocity.Magnitude > 500 or BasePart.Parent ~= TargetPlayer.Character or TargetPlayer.Parent ~= Players or not TargetPlayer.Character == TCharacter or THumanoid.Sit or Humanoid.Health <= 0 or tick() > Time + TimeToWait
        end
        
        workspace.FallenPartsDestroyHeight = 0/0
        
        local BV = Instance.new("BodyVelocity")
        BV.Name = "EpixVel"
        BV.Parent = RootPart
        BV.Velocity = Vector3.new(9e8, 9e8, 9e8)
        BV.MaxForce = Vector3.new(1/0, 1/0, 1/0)
        
        Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, false)
        
        if TRootPart and THead then
            if (TRootPart.CFrame.p - THead.CFrame.p).Magnitude > 5 then
                SFBasePart(THead)
            else
                SFBasePart(TRootPart)
            end
        elseif TRootPart and not THead then
            SFBasePart(TRootPart)
        elseif not TRootPart and THead then
            SFBasePart(THead)
        elseif not TRootPart and not THead and Accessory and Handle then
            SFBasePart(Handle)
        else
            -- ลบข้อความ Error Random enior ออก
            -- return Message("Error Occurred", "Random error", 5)
            return
        end
        
        BV:Destroy()
        Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true)
        workspace.CurrentCamera.CameraSubject = Humanoid
        
        repeat
            RootPart.CFrame = getgenv().OldPos * CFrame.new(0, .5, 0)
            Character:SetPrimaryPartCFrame(getgenv().OldPos * CFrame.new(0, .5, 0))
            Humanoid:ChangeState("GettingUp")
            table.foreach(Character:GetChildren(), function(_, x)
                if x:IsA("BasePart") then
                    x.Velocity, x.RotVelocity = Vector3.new(), Vector3.new()
                end
            end)
            task.wait()
        until (RootPart.Position - getgenv().OldPos.p).Magnitude < 25
        workspace.FallenPartsDestroyHeight = getgenv().FPDH
    else
        return
    end
end

-- === GUI & Controller Code (Edited) ===

local playerGui = Player:WaitForChild("PlayerGui")
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "SkidFlingGUI_v2"
screenGui.ResetOnSpawn = false
screenGui.Parent = playerGui

local mainFrame = Instance.new("Frame")
mainFrame.Name = "Main"
mainFrame.Size = UDim2.new(0, 320, 0, 420)
mainFrame.Position = UDim2.new(0.7, 0, 0.25, 0)
mainFrame.BackgroundColor3 = Color3.fromRGB(30,30,30)
mainFrame.BorderSizePixel = 0
mainFrame.Parent = screenGui
mainFrame.Active = true
pcall(function() mainFrame.Draggable = true end)

local title = Instance.new("TextLabel")
title.Size = UDim2.new(1,0,0,34)
title.BackgroundColor3 = Color3.fromRGB(45,45,45)
title.BorderSizePixel = 0
title.Text = "Skid Fling GUI"
title.TextColor3 = Color3.fromRGB(255,255,255)
title.TextScaled = true
title.Parent = mainFrame

local scrollFrame = Instance.new("ScrollingFrame")
scrollFrame.Name = "PlayerList"
scrollFrame.Size = UDim2.new(1, -20, 1, -140)
scrollFrame.Position = UDim2.new(0, 10, 0, 44)
scrollFrame.BackgroundTransparency = 1
scrollFrame.BorderSizePixel = 0
scrollFrame.CanvasSize = UDim2.new(0,0,0,0)
scrollFrame.Parent = mainFrame

local uiListLayout = Instance.new("UIListLayout")
uiListLayout.Padding = UDim.new(0,6)
uiListLayout.SortOrder = Enum.SortOrder.LayoutOrder
uiListLayout.Parent = scrollFrame

local allButton = Instance.new("TextButton")
allButton.Name = "AllBtn"
allButton.Size = UDim2.new(0.48, 0, 0, 36)
allButton.Position = UDim2.new(0.02, 0, 1, -80)
allButton.Text = "All: OFF"
allButton.BackgroundColor3 = Color3.fromRGB(80,80,80)
allButton.TextColor3 = Color3.fromRGB(255,255,255)
allButton.Parent = mainFrame

local singleButton = Instance.new("TextButton")
singleButton.Name = "SingleBtn"
singleButton.Size = UDim2.new(0.48, 0, 0, 36)
singleButton.Position = UDim2.new(0.50, 0, 1, -80)
singleButton.Text = "Single: OFF"
singleButton.BackgroundColor3 = Color3.fromRGB(80,80,80)
singleButton.TextColor3 = Color3.fromRGB(255,255,255)
singleButton.Parent = mainFrame

-- Separate Toggle GUI button (open/close)
local guiOpen = true
local toggleGUIButton = Instance.new("TextButton")
toggleGUIButton.Name = "ToggleGUI"
toggleGUIButton.Size = UDim2.new(0, 100, 0, 30)
toggleGUIButton.Position = UDim2.new(0.8, 0, 0.05, 0)
toggleGUIButton.Text = "Hide GUI"
toggleGUIButton.BackgroundColor3 = Color3.fromRGB(45,45,45)
toggleGUIButton.TextColor3 = Color3.fromRGB(255,255,255)
toggleGUIButton.Parent = screenGui
toggleGUIButton.ZIndex = 999

toggleGUIButton.MouseButton1Click:Connect(function()
    guiOpen = not guiOpen
    mainFrame.Visible = guiOpen
    toggleGUIButton.Text = guiOpen and "Hide GUI" or "Show GUI"
end)

-- Notification folder
local notifFolder = Instance.new("Folder")
notifFolder.Name = "SkidFlingNotifs"
notifFolder.Parent = screenGui

local AllActive = false
local SingleActive = false
local SelectedPlayer = nil

local function ShowTopNotification(text, color)
    color = color or Color3.fromRGB(200, 40, 40)
    local notif = Instance.new("Frame")
    notif.Size = UDim2.new(0, 260, 0, 40)
    notif.Position = UDim2.new(1, -280, 0, 16)
    notif.AnchorPoint = Vector2.new(0,0)
    notif.BackgroundColor3 = color
    notif.BorderSizePixel = 0
    notif.Parent = screenGui

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, -10, 1, 0)
    label.Position = UDim2.new(0, 5, 0, 0)
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextColor3 = Color3.fromRGB(255,255,255)
    label.TextScaled = true
    label.Parent = notif

    task.spawn(function()
        for i = 1, 3 do
            local tweenInfo = TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, true, 0)
            local tween = TweenService:Create(notif, tweenInfo, {BackgroundTransparency = 0.15})
            tween:Play()
            tween.Completed:Wait()
            task.wait(0.05)
        end
        local fade = TweenService:Create(notif, TweenInfo.new(1.2, Enum.EasingStyle.Quad), {BackgroundTransparency = 1})
        local fadeText = TweenService:Create(label, TweenInfo.new(1.2, Enum.EasingStyle.Quad), {TextTransparency = 1})
        fade:Play(); fadeText:Play()
        fade.Completed:Wait()
        notif:Destroy()
    end)
end

-- Update player list (with toggle selection)
local function UpdatePlayerList()
    for _,v in pairs(scrollFrame:GetChildren()) do
        if not v:IsA("UIListLayout") then
            v:Destroy()
        end
    end

    for _,plr in pairs(Players:GetPlayers()) do
        if plr ~= Player then
            local btn = Instance.new("TextButton")
            btn.Size = UDim2.new(1, -12, 0, 34)
            btn.Position = UDim2.new(0, 6, 0, 0)
            btn.BackgroundColor3 = Color3.fromRGB(60,60,60)
            btn.BorderSizePixel = 0
            btn.TextColor3 = Color3.fromRGB(255,255,255)
            btn.Text = plr.Name
            btn.Parent = scrollFrame

            local function refresh()
                if SelectedPlayer == plr then
                    btn.BackgroundColor3 = Color3.fromRGB(180,40,40)
                else
                    btn.BackgroundColor3 = Color3.fromRGB(60,60,60)
                end
            end
            refresh()

            btn.MouseButton1Click:Connect(function()
                if SelectedPlayer == plr then
                    SelectedPlayer = nil
                    SingleActive = false
                    singleButton.Text = "Single: OFF"
                    ShowTopNotification("Deselected: "..plr.Name, Color3.fromRGB(200,40,40))
                else
                    SelectedPlayer = plr
                    SingleActive = false
                    singleButton.Text = "Single: OFF"
                    ShowTopNotification("Selected: "..plr.Name, Color3.fromRGB(60,140,60))
                end
                UpdatePlayerList()
            end)
        end
    end

    scrollFrame.CanvasSize = UDim2.new(0, 0, 0, uiListLayout.AbsoluteContentSize.Y + 8)
end

UpdatePlayerList()

Players.PlayerAdded:Connect(function(plr)
    UpdatePlayerList()
    ShowTopNotification(plr.Name.." joined", Color3.fromRGB(60,160,60))
end)

Players.PlayerRemoving:Connect(function(plr)
    UpdatePlayerList()
    ShowTopNotification(plr.Name.." left", Color3.fromRGB(200,40,40))
    if SingleActive and SelectedPlayer == plr then
        SelectedPlayer = nil
        SingleActive = false
        singleButton.Text = "Single: OFF"
        ShowTopNotification("Single stopped — "..plr.Name.." left", Color3.fromRGB(200,40,40))
    end
end)

allButton.MouseButton1Click:Connect(function()
    AllActive = not AllActive
    allButton.Text = "All: "..(AllActive and "ON" or "OFF")
    ShowTopNotification("All mode "..(AllActive and "ON" or "OFF"), Color3.fromRGB(180,90,20))
end)

singleButton.MouseButton1Click:Connect(function()
    if not SelectedPlayer then
        ShowTopNotification("Please select a player first", Color3.fromRGB(200,40,40))
        return
    end
    SingleActive = not SingleActive
    singleButton.Text = "Single: "..(SingleActive and "ON" or "OFF")
    ShowTopNotification("Single mode "..(SingleActive and "ON" or "OFF").." -> "..SelectedPlayer.Name, Color3.fromRGB(180,90,20))
end
